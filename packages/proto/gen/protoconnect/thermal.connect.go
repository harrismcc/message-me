// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: thermal.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/harrismcc/example/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ThermalPrinterServiceName is the fully-qualified name of the ThermalPrinterService service.
	ThermalPrinterServiceName = "thermal.ThermalPrinterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ThermalPrinterServicePrintTextProcedure is the fully-qualified name of the
	// ThermalPrinterService's PrintText RPC.
	ThermalPrinterServicePrintTextProcedure = "/thermal.ThermalPrinterService/PrintText"
	// ThermalPrinterServiceTakePictureProcedure is the fully-qualified name of the
	// ThermalPrinterService's TakePicture RPC.
	ThermalPrinterServiceTakePictureProcedure = "/thermal.ThermalPrinterService/TakePicture"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	thermalPrinterServiceServiceDescriptor           = proto.File_thermal_proto.Services().ByName("ThermalPrinterService")
	thermalPrinterServicePrintTextMethodDescriptor   = thermalPrinterServiceServiceDescriptor.Methods().ByName("PrintText")
	thermalPrinterServiceTakePictureMethodDescriptor = thermalPrinterServiceServiceDescriptor.Methods().ByName("TakePicture")
)

// ThermalPrinterServiceClient is a client for the thermal.ThermalPrinterService service.
type ThermalPrinterServiceClient interface {
	PrintText(context.Context, *connect.Request[proto.PrintTextRequest]) (*connect.Response[proto.PrintResponse], error)
	TakePicture(context.Context, *connect.Request[proto.Empty]) (*connect.ServerStreamForClient[proto.ImageFileResponse], error)
}

// NewThermalPrinterServiceClient constructs a client for the thermal.ThermalPrinterService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThermalPrinterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThermalPrinterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &thermalPrinterServiceClient{
		printText: connect.NewClient[proto.PrintTextRequest, proto.PrintResponse](
			httpClient,
			baseURL+ThermalPrinterServicePrintTextProcedure,
			connect.WithSchema(thermalPrinterServicePrintTextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		takePicture: connect.NewClient[proto.Empty, proto.ImageFileResponse](
			httpClient,
			baseURL+ThermalPrinterServiceTakePictureProcedure,
			connect.WithSchema(thermalPrinterServiceTakePictureMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// thermalPrinterServiceClient implements ThermalPrinterServiceClient.
type thermalPrinterServiceClient struct {
	printText   *connect.Client[proto.PrintTextRequest, proto.PrintResponse]
	takePicture *connect.Client[proto.Empty, proto.ImageFileResponse]
}

// PrintText calls thermal.ThermalPrinterService.PrintText.
func (c *thermalPrinterServiceClient) PrintText(ctx context.Context, req *connect.Request[proto.PrintTextRequest]) (*connect.Response[proto.PrintResponse], error) {
	return c.printText.CallUnary(ctx, req)
}

// TakePicture calls thermal.ThermalPrinterService.TakePicture.
func (c *thermalPrinterServiceClient) TakePicture(ctx context.Context, req *connect.Request[proto.Empty]) (*connect.ServerStreamForClient[proto.ImageFileResponse], error) {
	return c.takePicture.CallServerStream(ctx, req)
}

// ThermalPrinterServiceHandler is an implementation of the thermal.ThermalPrinterService service.
type ThermalPrinterServiceHandler interface {
	PrintText(context.Context, *connect.Request[proto.PrintTextRequest]) (*connect.Response[proto.PrintResponse], error)
	TakePicture(context.Context, *connect.Request[proto.Empty], *connect.ServerStream[proto.ImageFileResponse]) error
}

// NewThermalPrinterServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThermalPrinterServiceHandler(svc ThermalPrinterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	thermalPrinterServicePrintTextHandler := connect.NewUnaryHandler(
		ThermalPrinterServicePrintTextProcedure,
		svc.PrintText,
		connect.WithSchema(thermalPrinterServicePrintTextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	thermalPrinterServiceTakePictureHandler := connect.NewServerStreamHandler(
		ThermalPrinterServiceTakePictureProcedure,
		svc.TakePicture,
		connect.WithSchema(thermalPrinterServiceTakePictureMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/thermal.ThermalPrinterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThermalPrinterServicePrintTextProcedure:
			thermalPrinterServicePrintTextHandler.ServeHTTP(w, r)
		case ThermalPrinterServiceTakePictureProcedure:
			thermalPrinterServiceTakePictureHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThermalPrinterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThermalPrinterServiceHandler struct{}

func (UnimplementedThermalPrinterServiceHandler) PrintText(context.Context, *connect.Request[proto.PrintTextRequest]) (*connect.Response[proto.PrintResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("thermal.ThermalPrinterService.PrintText is not implemented"))
}

func (UnimplementedThermalPrinterServiceHandler) TakePicture(context.Context, *connect.Request[proto.Empty], *connect.ServerStream[proto.ImageFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("thermal.ThermalPrinterService.TakePicture is not implemented"))
}
